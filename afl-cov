#!/usr/bin/env python
#
#  File: afl-cov
#
#  Purpose: Perform lcov coverage diff's against each AFL queue file to see
#           new functions and line coverage evolve from an AFL fuzzing cycle.
#
#  Copyright (C) 2015 Michael Rash (mbr@cipherdyne.org)
#
#  License (GNU General Public License):
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
#  USA
#

from shutil import rmtree
import subprocess
import glob
import argparse
import sys, os

def main():

    exit_failure = 1
    exit_success = 0

    args = handle_cmdline()

    if not validate_args(args):
        return exit_failure

    afl_files = import_dir(args.afl_fuzzing_dir + '/queue')

    print "[+] Imported %d files from: %s" % (len(afl_files),
            (args.afl_fuzzing_dir + '/queue'))

    FNULL = open(os.devnull, 'w')

    for f in afl_files:
        basename  = os.path.basename(f)
        dirname   = os.path.dirname(f)

        print os.path.basename(f)
        print os.path.dirname(f)

        if (args.coverage_cmd):
            cmd = args.coverage_cmd.replace('AFL_FILE', f)

            fh = FNULL
            if args.disable_cmd_redirection:
                fh = None

            ### execute the command to generate code coverage stats
            ### for the current AFL file
            print cmd
            subprocess.call(cmd, stdin=None,
                    stdout=fh, stderr=subprocess.STDOUT, shell=True)

            ### collect the code coverage stats
            generate_coverage(args, f)

            ### diff to the previous code coverage and look for
            ### new lines/functions

        break

    FNULL.close()

    return exit_success

def generate_coverage(args, f):
    basename  = os.path.basename(f)
    dirname   = os.path.dirname(f)

    lcov_file = dirname + '/cov/lcov/' + basename + '.lcov'

    lcov_cmd = "lcov --rc lcov_branch_coverage=1 " \
            + "--no-checksum --capture --directory " \
            + args.code_dir + " --output-file " + lcov_file
    return

def import_dir(qdir):
    return sorted(glob.glob(qdir + "/id:*"))

def validate_args(args):

    if not args.afl_fuzzing_dir and not args.afl_queue_dir:
        print "[*] Must specify either --afl-fuzzing-dir or --afl-queue-dir"
        return 0

    if not os.path.exists(args.afl_fuzzing_dir):
        print "[*] It doesn't look like directory '%s' exists" \
                % args.afl_fuzzing_dir
        return 0

    if not os.path.exists(args.afl_fuzzing_dir + '/queue'):
        print "[*] '%s' does not exist, is this an AFL directory?" \
                % (args.afl_fuzzing_dir + '/queue')
        return 0

    if os.path.exists(args.afl_fuzzing_dir + '/cov'):
        if args.overwrite:
            if args.coverage_diff:
                print "[*] --overwrite and --coverage-diff are incompatible"
                return 0
            rmtree(args.afl_fuzzing_dir + '/cov')
        else:
            if not args.coverage_diff:
                print "[*] Existing coverage dir found, Use --overwrite to re-calculate coverage"
                return 0
    else:
        if args.coverage_diff:
            print "[*] --coverage-diff mode requires a previous afl-cov run"
            return 0
        os.mkdir(args.afl_fuzzing_dir + '/cov')
        os.mkdir(args.afl_fuzzing_dir + '/cov/web')
        os.mkdir(args.afl_fuzzing_dir + '/cov/lcov')
        os.mkdir(args.afl_fuzzing_dir + '/cov/diff')

    if args.coverage_diff and args.coverage_cmd:
        print "[*] --coverage-cmd and --coverage-diff are incompatible"

    if not args.coverage_diff and not args.coverage_cmd:
        print "[*] Must set --coverage-cmd unless running in --coverage-diff mode"
        return 0

    if args.coverage_cmd and 'AFL_FILE' not in args.coverage_cmd:
        print "[*] --coverage-cmd must contain AFL_FILE"
        return 0

    if args.code_dir:
        if not os.path.exists(args.code_dir):
            print "[*] --code-dir path does not exist"
            return 0
    else:
        if not args.coverage_diff:
            print "[*] Must set --code-dir unless running in --coverage-diff mode"
            return 0

    return 1

def handle_cmdline():

    p = argparse.ArgumentParser()

    p.add_argument("-e", "--coverage-cmd", type=str,
            help="Set command to exec (including args, and assumes code coverage support)")
    p.add_argument("-d", "--afl-fuzzing-dir", type=str,
            help="Top level AFL fuzzing directory")
    p.add_argument("-c", "--code-dir", type=str,
            help="Directory where the code lives (compiled with code coverage support)")
    p.add_argument("-O", "--overwrite", action='store_true',
            help="Overwrite existing coverage results", default=False)
    p.add_argument("--disable-cmd-redirection", action='store_true',
            help="Disable redirection of command results to /dev/null",
            default=False)
    p.add_argument("--coverage-diff", action='store_true',
            help="Display code coverage diffs from a previous afl-cov run",
            default=False)
    p.add_argument("-v", "--verbose", action='store_true',
            help="Verbose mode", default=False)

    return p.parse_args()

if __name__ == "__main__":
    sys.exit(main())
