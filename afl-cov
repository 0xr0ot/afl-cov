#!/usr/bin/env python
#
#  File: afl-cov
#
#  Purpose: Perform lcov coverage diff's against each AFL queue file to see
#           new functions and line coverage evolve from an AFL fuzzing cycle.
#
#  Copyright (C) 2015 Michael Rash (mbr@cipherdyne.org)
#
#  License (GNU General Public License):
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
#  USA
#

from shutil import rmtree
import re
import subprocess
import glob
import argparse
import sys, os

def main():

    exit_failure = 1
    exit_success = 0
    found        = 0

    cargs = handle_cmdline()

    if not validate_args(cargs):
        return exit_failure

    afl_files = import_dir(cargs.afl_fuzzing_dir + '/queue')
    tot_files = len(afl_files)

    if cargs.verbose or not cargs.quiet:
        print "[+] Imported %d files from: %s" \
                % (tot_files, (cargs.afl_fuzzing_dir + '/queue'))

    file_num  = 1
    prev_file = ''

    for f in afl_files:
        if cargs.verbose or not cargs.quiet:
            print "\n[+] AFL File: %s (%d / %d)" \
                    % (f, file_num, tot_files)

        files = gen_paths(cargs, prev_file, f)

        if cargs.coverage_cmd:
            ### execute the command to generate code coverage stats
            ### for the current AFL file
            run_cmd(cargs.coverage_cmd.replace('AFL_FILE', f), cargs)

            ### collect the code coverage stats
            gen_coverage(cargs, files, f)

        if cargs.coverage_diff:
            ### diff to the previous code coverage and look for
            ### new lines/functions
            if file_num > 1:
                found = coverage_diff(cargs, files, prev_file, f)
                if found:
                    if cargs.func_search:
                        print "[+] Function '%s' executed by: %s" \
                                % (cargs.func_search, os.path.basename(f))
                        break
                    elif cargs.line_search:
                        print "[+] Line '%s' executed by: %s" \
                                % (cargs.line_search, os.path.basename(f))
                        break

        prev_file = f
        file_num += 1

    if cargs.verbose or not cargs.quiet:
        print "[+] Processed %d / %d files" % (file_num-1, tot_files)

    if not found:
        if cargs.func_search:
            print "[-] Function '%s' not found..." % cargs.func_search
        elif cargs.line_search:
            print "[-] Line %s not found..." % cargs.line_search

    return exit_success

def coverage_diff(cargs, files, a, b):

    if cargs.verbose or not cargs.quiet:
        print "[+] Coverage diff %s %s" \
                % (os.path.basename(a), os.path.basename(b))

    old_coverage = extract_coverage(files['prev_lcov_info_final'])
    new_coverage = extract_coverage(files['lcov_info_final'])

    ### diff the two dictionaries
    for f in old_coverage:
        printed_file = 0
        if f in new_coverage:
            for ctype in old_coverage[f]:
                for val in sorted(old_coverage[f][ctype]):
                    if val not in new_coverage[f][ctype]:
                        if not printed_file:
                            if cargs.verbose or not cargs.quiet:
                                print "    Src file: " + f
                            printed_file = 1
                        if cargs.verbose or not cargs.quiet:
                            print "      New '" + ctype + "' coverage: " + val
                        if ctype == 'function':
                            if cargs.func_search and cargs.func_search == val:
                                if cargs.src_file:
                                    if cargs.src_file == f:
                                        return 1
                                else:
                                    return 1
                        elif ctype == 'line':
                            if cargs.line_search and cargs.line_search == val:
                                if cargs.src_file:
                                    if cargs.src_file == f:
                                        return 1
                                else:
                                    return 1

    return 0

def extract_coverage(lcov_file):

    coverage = {}

    ### populate old lcov output for functions/lines that were called
    ### zero times
    with open(lcov_file, 'r') as f:
        current_file = ''
        for line in f:
            line = line.strip()

            m = re.search('SF:(\S+)', line)
            if m and m.group(1):
                current_file = m.group(1)
                coverage[current_file] = {}
                coverage[current_file]['function'] = {}
                coverage[current_file]['line'] = {}
                continue

            if current_file:
                ### look for functions that were never called
                m = re.search('^FNDA:0,(\S+)', line)
                if m and m.group(1):
                    coverage[current_file]['function'][m.group(1) + '()'] = ''
                    continue

                ### look for lines that were never called
                m = re.search('^DA:(\d+),0', line)
                if m and m.group(1):
                    coverage[current_file]['line'][m.group(1)] = ''

    return coverage

def gen_coverage(cargs, files, afl_file):

    os.mkdir(files['lcov_web_dir'])

    run_cmd("lcov --rc lcov_branch_coverage=1" \
            + " --no-checksum --capture --directory " \
            + cargs.code_dir + " --output-file " \
            + files['lcov_info'], \
            cargs)

    run_cmd("lcov --rc lcov_branch_coverage=1" \
            + " --no-checksum -a " + files['lcov_base'] \
            + " -a " + files['lcov_info'] \
            + " --output-file " + files['lcov_info_final'], \
            cargs)

    run_cmd("lcov --rc lcov_branch_coverage=1" \
            + " --no-checksum -r " + files['lcov_info'] \
            + " /usr/include/\*  --output-file " \
            + files['lcov_info_final'], cargs)

    if not cargs.disable_lcov_web:
        run_cmd("genhtml --branch-coverage --output-directory " \
                + files['lcov_web_dir'] + " " \
                + files['lcov_info_final'], \
                cargs)

    return

def gen_paths(cargs, prev_afl_file, afl_file):

    files = {}

    basename = os.path.basename(afl_file)

    files['diff'] = cargs.afl_fuzzing_dir + '/cov/diff/' \
            + basename + '.cov_diff'
    files['lcov_web_dir'] = cargs.afl_fuzzing_dir + '/cov/web/' \
            + basename
    files['lcov_base'] = cargs.afl_fuzzing_dir + '/cov/lcov/' \
            + basename + '.lcov_base'
    files['lcov_info'] = cargs.afl_fuzzing_dir + '/cov/lcov/' \
            + basename + '.lcov_info'
    files['lcov_info_final'] = cargs.afl_fuzzing_dir + '/cov/lcov/' \
            + basename + '.lcov_info_final'

    if prev_afl_file:
        files['prev_lcov_info_final'] = cargs.afl_fuzzing_dir \
                + '/cov/lcov/' + os.path.basename(prev_afl_file) \
                + '.lcov_info_final'

    return files

def run_cmd(cmd, cargs):

    if cargs.verbose:
        print "    CMD: %s" % cmd

    fh = None
    if not cargs.disable_cmd_redirection:
        fh = open(os.devnull, 'w')

    subprocess.call(cmd, stdin=None,
            stdout=fh, stderr=subprocess.STDOUT, shell=True)

    if not cargs.disable_cmd_redirection:
        fh.close()

    return

def import_dir(qdir):
    return sorted(glob.glob(qdir + "/id:*"))

def validate_args(cargs):

    if not cargs.afl_fuzzing_dir and not cargs.afl_queue_dir:
        print "[*] Must specify either --afl-fuzzing-dir or --afl-queue-dir"
        return 0

    if not os.path.exists(cargs.afl_fuzzing_dir):
        print "[*] It doesn't look like directory '%s' exists" \
                % cargs.afl_fuzzing_dir
        return 0

    if not os.path.exists(cargs.afl_fuzzing_dir + '/queue'):
        print "[*] '%s' does not exist, is this an AFL directory?" \
                % (cargs.afl_fuzzing_dir + '/queue')
        return 0

    create_cov_dirs = 0
    if os.path.exists(cargs.afl_fuzzing_dir + '/cov'):
        if cargs.overwrite:
            if cargs.coverage_diff:
                print "[*] --overwrite and --coverage-diff are incompatible"
                return 0
            rmtree(cargs.afl_fuzzing_dir + '/cov')
            create_cov_dirs = 1
        else:
            if not cargs.coverage_diff:
                print "[*] Existing coverage dir found, Use --overwrite to re-calculate coverage"
                return 0
    else:
        if cargs.coverage_diff:
            print "[*] --coverage-diff mode requires a previous afl-cov run"
            return 0
        create_cov_dirs = 1

    if create_cov_dirs:
        os.mkdir(cargs.afl_fuzzing_dir + '/cov')
        os.mkdir(cargs.afl_fuzzing_dir + '/cov/web')
        os.mkdir(cargs.afl_fuzzing_dir + '/cov/lcov')
        os.mkdir(cargs.afl_fuzzing_dir + '/cov/diff')

    if cargs.coverage_diff and cargs.coverage_cmd:
        print "[*] --coverage-cmd and --coverage-diff are incompatible"

    if not cargs.coverage_diff and not cargs.coverage_cmd:
        print "[*] Must set --coverage-cmd unless running in --coverage-diff mode"
        return 0

    if cargs.coverage_cmd and 'AFL_FILE' not in cargs.coverage_cmd:
        print "[*] --coverage-cmd must contain AFL_FILE"
        return 0

    if cargs.code_dir:
        if not os.path.exists(cargs.code_dir):
            print "[*] --code-dir path does not exist"
            return 0
    else:
        if not cargs.coverage_diff:
            print "[*] Must set --code-dir unless running in --coverage-diff mode"
            return 0

    if cargs.func_search or cargs.line_search:
        if not cargs.verbose:
            cargs.quiet = 1
        if cargs.line_search and not cargs.src_file:
            print "[*] Must set --src-file in --line-search mode"
            return 0

    return 1

def handle_cmdline():

    p = argparse.ArgumentParser()

    p.add_argument("-e", "--coverage-cmd", type=str,
            help="Set command to exec (including args, and assumes code coverage support)")
    p.add_argument("-d", "--afl-fuzzing-dir", type=str,
            help="Top level AFL fuzzing directory")
    p.add_argument("-c", "--code-dir", type=str,
            help="Directory where the code lives (compiled with code coverage support)")
    p.add_argument("-O", "--overwrite", action='store_true',
            help="Overwrite existing coverage results", default=False)
    p.add_argument("--disable-cmd-redirection", action='store_true',
            help="Disable redirection of command results to /dev/null",
            default=False)
    p.add_argument("--disable-lcov-web", action='store_true',
            help="Disable generate of lcov web code coverage reports",
            default=False)
    p.add_argument("--coverage-diff", action='store_true',
            help="Display code coverage diffs from a previous afl-cov run",
            default=False)
    p.add_argument("--func-search", type=str,
            help="Search for coverage of a specific function")
    p.add_argument("--line-search", type=str,
            help="Search for coverage of a specific line number (requires --src-file)")
    p.add_argument("--src-file", type=str,
            help="Restrict function or line search to a specfic source file")
    p.add_argument("-v", "--verbose", action='store_true',
            help="Verbose mode", default=False)
    p.add_argument("-q", "--quiet", action='store_true',
            help="Quiet mode", default=False)

    return p.parse_args()

if __name__ == "__main__":
    sys.exit(main())
